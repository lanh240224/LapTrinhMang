package UngDungChat_TCP;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.sound.sampled.*;
import java.util.concurrent.atomic.AtomicBoolean;

public class Client {
    private JFrame frame;              // C·ª≠a s·ªï giao di·ªán ch√≠nh c·ªßa client
    private JPanel chatArea;
    private JScrollPane chatScrollPane;        // Khu v·ª±c hi·ªÉn th·ªã tin nh·∫Øn v√† log
    private String selectedClient = null;     // Client ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ chat
    private java.util.List<MessageData> allMessages = new java.util.ArrayList<>(); // L∆∞u t·∫•t c·∫£ tin nh·∫Øn
    private java.util.Map<String, Integer> unreadCounts = new java.util.HashMap<>(); // S·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc cho m·ªói client
    private JTextField inputField;     // √î nh·∫≠p tin nh·∫Øn t·ª´ client
    private JButton sendButton;        // N√∫t g·ª≠i tin nh·∫Øn
    private JLabel statusLabel;        // Label hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi
    private Socket socket;             // Socket k·∫øt n·ªëi v·ªõi server
    private PrintWriter out;           // D√≤ng xu·∫•t ƒë·ªÉ g·ª≠i tin nh·∫Øn
    private BufferedReader in;         // D√≤ng nh·∫≠p ƒë·ªÉ nh·∫≠n tin nh·∫Øn
    private String clientName;         // T√™n c·ªßa client
    private boolean historyCleared = false; // Flag ƒë·ªÉ tr√°nh hi·ªÉn th·ªã th√¥ng b√°o l·∫∑p l·∫°i
    private JList<RecipientItem> contactsList; // Danh s√°ch li√™n h·ªá
    private DefaultListModel<RecipientItem> contactsModel; // Model cho danh s√°ch li√™n h·ªá
    private JLabel userNameLabel; // Label hi·ªÉn th·ªã t√™n client ƒë∆∞·ª£c ch·ªçn
    private JLabel userStatusLabel; // Label hi·ªÉn th·ªã tr·∫°ng th√°i client
    private JLabel avatarLabel; // Label hi·ªÉn th·ªã avatar
    private JPanel selectedClientPanel; // Panel hi·ªÉn th·ªã th√¥ng tin client ƒë∆∞·ª£c ch·ªçn
    
    // Voice chat variables
    private JButton voiceButton; // N√∫t g·ª≠i voice
    private AtomicBoolean isRecording = new AtomicBoolean(false);
    private TargetDataLine microphone;
    private AudioFormat audioFormat;
    private ByteArrayOutputStream audioBuffer;
    
    // Avatar variables
    private JButton avatarButton; // N√∫t thay ƒë·ªïi avatar
    private String currentAvatar = "üòÄ"; // Avatar m·∫∑c ƒë·ªãnh

    // Constructor kh·ªüi t·∫°o client, t·∫°o GUI v√† k·∫øt n·ªëi ƒë·∫øn server
    public Client() {
        initializeGUI();                // G·ªçi ph∆∞∆°ng th·ª©c ƒë·ªÉ kh·ªüi t·∫°o giao di·ªán
        loadChatHistory();               // T·∫£i l·ªãch s·ª≠ chat t·ª´ file
        connectToServer();              // G·ªçi ph∆∞∆°ng th·ª©c ƒë·ªÉ k·∫øt n·ªëi ƒë·∫øn server
    }

    // Kh·ªüi t·∫°o giao di·ªán Swing cho client
    private void initializeGUI() {
        // Thi·∫øt l·∫≠p Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            // N·∫øu kh√¥ng th·ªÉ thi·∫øt l·∫≠p Look and Feel, s·ª≠ d·ª•ng default
            System.err.println("Could not set Look and Feel: " + e.getMessage());
        }

        frame = new JFrame("Chat App"); 
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        frame.setSize(900, 600);
        frame.setLocationRelativeTo(null);
        frame.getContentPane().setBackground(new Color(248, 249, 250)); // Light theme

        // T·∫°o layout ch√≠nh v·ªõi hai c·ªôt
        frame.setLayout(new BorderLayout());
        frame.getRootPane().setBorder(new EmptyBorder(0, 0, 0, 0));

        // Panel ch√≠nh v·ªõi hai c·ªôt
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(new Color(248, 249, 250));
        
        // Panel b√™n tr√°i - danh s√°ch li√™n h·ªá
        JPanel contactsPanel = createContactsPanel();
        mainPanel.add(contactsPanel, BorderLayout.WEST);
        
        // Panel b√™n ph·∫£i - chat
        JPanel chatPanel = createChatPanel();
        mainPanel.add(chatPanel, BorderLayout.CENTER);

        frame.add(mainPanel, BorderLayout.CENTER);

        // Thi·∫øt l·∫≠p s·ª± ki·ªán
        setupEventListeners();

        frame.setVisible(true);          // Hi·ªÉn th·ªã giao di·ªán
    }

    private JPanel createContactsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setPreferredSize(new Dimension(250, 0));
        panel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, new Color(220, 220, 220)));
        
        // Header v·ªõi t√™n ·ª©ng d·ª•ng
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(Color.WHITE);
        headerPanel.setBorder(new EmptyBorder(6, 12, 0, 12)); // X√≥a kho·∫£ng c√°ch d∆∞·ªõi
        
        JLabel titleLabel = new JLabel("Chat App");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 20));
        titleLabel.setForeground(new Color(50, 50, 50));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        // Status indicator
        statusLabel = new JLabel("Connecting...");
        statusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        statusLabel.setForeground(new Color(100, 100, 100));
        headerPanel.add(statusLabel, BorderLayout.EAST);
        
        panel.add(headerPanel, BorderLayout.NORTH);
        
        // Online clients list ngay d∆∞·ªõi Chat Application
        JPanel onlineClientsPanel = createOnlineClientsPanel();
        panel.add(onlineClientsPanel, BorderLayout.CENTER);
        
        // Contacts list
        JPanel contactsListPanel = new JPanel(new BorderLayout());
        contactsListPanel.setBackground(Color.WHITE);
        contactsListPanel.setBorder(null);
        
        // T·∫°o danh s√°ch li√™n h·ªá
        contactsModel = new DefaultListModel<>();
        contactsList = new JList<>(contactsModel);
        contactsList.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        contactsList.setBackground(Color.WHITE);
        contactsList.setForeground(new Color(50, 50, 50));
        contactsList.setSelectionBackground(new Color(0, 120, 215));
        contactsList.setCellRenderer(new ContactListCellRenderer());
        
        // Th√™m s·ª± ki·ªán click ƒë·ªÉ ch·ªçn client
        contactsList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                RecipientItem selectedItem = contactsList.getSelectedValue();
                if (selectedItem != null) {
                    updateSelectedContact(selectedItem);
                }
            }
        });
        
        JScrollPane contactsScrollPane = new JScrollPane(contactsList);
        contactsScrollPane.setBorder(null);
        contactsScrollPane.getViewport().setBackground(Color.WHITE);
        contactsScrollPane.getVerticalScrollBar().setBackground(Color.WHITE);
        contactsScrollPane.getVerticalScrollBar().setForeground(new Color(150, 150, 150));
        
        contactsListPanel.add(contactsScrollPane, BorderLayout.CENTER);
        panel.add(contactsListPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createOnlineClientsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(null);
        
        // Header "Online Clients"
        JLabel onlineLabel = new JLabel("Danh s√°ch Clients");
        onlineLabel.setFont(new Font("Segoe UI", Font.BOLD, 17));
        onlineLabel.setForeground(new Color(50, 50, 50));
        onlineLabel.setBorder(new EmptyBorder(0, 0, 0, 0)); // X√≥a kho·∫£ng c√°ch tr√™n
        
        // Panel ch·ª©a danh s√°ch client online
        JPanel clientsListPanel = new JPanel();
        clientsListPanel.setLayout(new BoxLayout(clientsListPanel, BoxLayout.Y_AXIS));
        clientsListPanel.setBackground(Color.WHITE);
        clientsListPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        clientsListPanel.setBorder(null);
        
        // Th√¥ng tin client ƒë∆∞·ª£c ch·ªçn (·∫©n ban ƒë·∫ßu)
        selectedClientPanel = new JPanel(new BorderLayout(5, 0));
        selectedClientPanel.setBackground(Color.WHITE);
        selectedClientPanel.setBorder(new EmptyBorder(5, 0, 5, 0));
        selectedClientPanel.setVisible(false); // ·∫®n v√¨ s·∫Ω ch·ªâ hi·ªÉn th·ªã ·ªü chat header
        
        // Avatar c·ªßa client ƒë∆∞·ª£c ch·ªçn
        avatarLabel = new JLabel("?");
        avatarLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        avatarLabel.setForeground(Color.WHITE);
        avatarLabel.setHorizontalAlignment(SwingConstants.CENTER);
        avatarLabel.setPreferredSize(new Dimension(35, 35));
        avatarLabel.setBackground(new Color(100, 100, 100));
        avatarLabel.setOpaque(true);
        avatarLabel.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
        
        // Th√¥ng tin chi ti·∫øt
        JPanel userDetailsPanel = new JPanel(new BorderLayout());
        userDetailsPanel.setBackground(Color.WHITE);
        
        userNameLabel = new JLabel("Select a contact");
        userNameLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        userNameLabel.setForeground(new Color(50, 50, 50));
        
        userStatusLabel = new JLabel("");
        userStatusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 11));
        userStatusLabel.setForeground(new Color(0, 150, 0));
        
        userDetailsPanel.add(userNameLabel, BorderLayout.NORTH);
        userDetailsPanel.add(userStatusLabel, BorderLayout.SOUTH);
        
        selectedClientPanel.add(avatarLabel, BorderLayout.WEST);
        selectedClientPanel.add(userDetailsPanel, BorderLayout.CENTER);
        
        // S·ª≠ d·ª•ng GridBagLayout ƒë·ªÉ ki·ªÉm so√°t ch√≠nh x√°c kho·∫£ng c√°ch
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new GridBagLayout());
        contentPanel.setBackground(Color.WHITE);
        contentPanel.setBorder(null); // Lo·∫°i b·ªè margin m·∫∑c ƒë·ªãnh
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 0, 0, 0); // Kh√¥ng c√≥ kho·∫£ng c√°ch
        
        contentPanel.add(onlineLabel, gbc);
        
        gbc.gridy = 1;
        gbc.insets = new Insets(0, 0, 0, 0); // Lo·∫°i b·ªè ho√†n to√†n kho·∫£ng c√°ch
        contentPanel.add(clientsListPanel, gbc);
        
        gbc.gridy = 2;
        gbc.insets = new Insets(0, 0, 0, 0); // Kh√¥ng c√≥ kho·∫£ng c√°ch
        contentPanel.add(selectedClientPanel, gbc);
        
        panel.add(contentPanel, BorderLayout.CENTER);
        
        return panel;
    }


    private JPanel createChatPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(248, 249, 250));
        
        // Chat header
        JPanel chatHeader = new JPanel(new BorderLayout());
        chatHeader.setBackground(Color.WHITE);
        chatHeader.setBorder(new EmptyBorder(15, 15, 15, 15));
        chatHeader.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(220, 220, 220)));
        
        // Avatar v√† th√¥ng tin ng∆∞·ªùi chat
        JPanel userInfoPanel = new JPanel(new BorderLayout(10, 0));
        userInfoPanel.setBackground(Color.WHITE);
        
        // Avatar placeholder
        avatarLabel = new JLabel("?");
        avatarLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        avatarLabel.setForeground(Color.WHITE);
        avatarLabel.setHorizontalAlignment(SwingConstants.CENTER);
        avatarLabel.setPreferredSize(new Dimension(40, 40));
        avatarLabel.setBackground(new Color(100, 100, 100));
        avatarLabel.setOpaque(true);
        avatarLabel.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
        
        JPanel userDetailsPanel = new JPanel(new BorderLayout());
        userDetailsPanel.setBackground(Color.WHITE);
        
        userNameLabel = new JLabel("Select a contact");
        userNameLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        userNameLabel.setForeground(new Color(50, 50, 50));
        
        userStatusLabel = new JLabel("");
        userStatusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        userStatusLabel.setForeground(new Color(0, 150, 0));
        
        userDetailsPanel.add(userNameLabel, BorderLayout.NORTH);
        userDetailsPanel.add(userStatusLabel, BorderLayout.SOUTH);
        
        userInfoPanel.add(avatarLabel, BorderLayout.WEST);
        userInfoPanel.add(userDetailsPanel, BorderLayout.CENTER);
        
        chatHeader.add(userInfoPanel, BorderLayout.WEST);
        
        panel.add(chatHeader, BorderLayout.NORTH);
        
        // Chat area
        JPanel chatAreaWrapper = new JPanel(new BorderLayout());
        chatAreaWrapper.setBackground(Color.WHITE);
        chatAreaWrapper.setBorder(null);
        
        chatArea = new JPanel();
        chatArea.setLayout(new GridBagLayout()); // Thay ƒë·ªïi sang GridBagLayout ƒë·ªÉ ki·ªÉm so√°t t·ªët h∆°n
        chatArea.setBackground(Color.WHITE);
        chatArea.setBorder(null);
        
        // Th√™m welcome message
        JPanel welcomePanel = new JPanel();
        welcomePanel.setLayout(new BorderLayout());
        welcomePanel.setBackground(Color.WHITE);
        
        JLabel welcomeLabel = new JLabel("<html><div style='color: #666; text-align: center; padding: 20px;'>" +
                                        "Welcome to Chat Application!<br>Select a contact to start chatting." +
                                        "</div></html>");
        welcomeLabel.setHorizontalAlignment(SwingConstants.CENTER);
        welcomePanel.add(welcomeLabel, BorderLayout.CENTER);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        chatArea.add(welcomePanel, gbc);
        
        chatScrollPane = new JScrollPane(chatArea);
        chatScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        chatScrollPane.setBorder(null);
        chatScrollPane.getViewport().setBackground(Color.WHITE);
        
        // Custom scrollbar styling
        chatScrollPane.getVerticalScrollBar().setBackground(Color.WHITE);
        chatScrollPane.getVerticalScrollBar().setForeground(new Color(150, 150, 150));
        
        // TƒÉng t·ªëc ƒë·ªô cu·ªôn
        chatScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        chatScrollPane.getVerticalScrollBar().setBlockIncrement(64);
        
        chatAreaWrapper.add(chatScrollPane, BorderLayout.CENTER);
        panel.add(chatAreaWrapper, BorderLayout.CENTER);
        
        // Input panel
        JPanel inputPanel = createInputPanel();
        panel.add(inputPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createInputPanel() {
        JPanel panel = new JPanel(new BorderLayout(15, 0));
        panel.setBackground(Color.WHITE);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(220, 220, 220)));
        

        // Message input field
        inputField = new JTextField();
        inputField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        inputField.setBackground(Color.WHITE);
        inputField.setForeground(new Color(50, 50, 50));
        inputField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),
            BorderFactory.createEmptyBorder(12, 15, 12, 15)
        ));
        setPlaceholderText(inputField, "Type your message here...");
        
        // File button v·ªõi icon file
        JButton fileButton = new JButton();
        fileButton.setBackground(Color.WHITE);
        fileButton.setForeground(Color.BLACK);
        fileButton.setFocusPainted(false);
        fileButton.setPreferredSize(new Dimension(45, 45));
        fileButton.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
        fileButton.setIcon(new PaperclipIcon());
        
        // Hover effect for file button
        fileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fileButton.setBackground(new Color(240, 240, 240));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fileButton.setBackground(Color.WHITE);
            }
        });
        
        // File button action
        fileButton.addActionListener(e -> sendFile());
        

        
        // Voice button
        voiceButton = new JButton();
        voiceButton.setBackground(Color.WHITE);
        voiceButton.setForeground(Color.BLACK);
        voiceButton.setFocusPainted(false);
        voiceButton.setPreferredSize(new Dimension(45, 45));
        voiceButton.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
        voiceButton.setIcon(new VoiceIcon());
        
        // Hover effect for voice button
        voiceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                voiceButton.setBackground(new Color(240, 240, 240));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                voiceButton.setBackground(Color.WHITE);
            }
        });
        
        // Voice button action
        voiceButton.addActionListener(e -> toggleVoiceRecording());
        
        // Avatar button
        avatarButton = new JButton(currentAvatar);
        avatarButton.setBackground(Color.WHITE);
        avatarButton.setForeground(Color.BLACK);
        avatarButton.setFocusPainted(false);
        avatarButton.setPreferredSize(new Dimension(45, 45));
        avatarButton.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
        avatarButton.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 16));
        avatarButton.setHorizontalAlignment(SwingConstants.CENTER);
        avatarButton.setVerticalAlignment(SwingConstants.CENTER);
        
        // Hover effect for avatar button
        avatarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                avatarButton.setBackground(new Color(240, 240, 240));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                avatarButton.setBackground(Color.WHITE);
            }
        });
        
        // Avatar button action
        avatarButton.addActionListener(e -> showAvatarPicker());
        
        // Send button v·ªõi h√¨nh tam gi√°c m√†u ƒëen
        sendButton = new JButton();
        sendButton.setBackground(Color.WHITE); // N·ªÅn tr·∫Øng
        sendButton.setForeground(Color.BLACK);
        sendButton.setFocusPainted(false);
        sendButton.setPreferredSize(new Dimension(45, 45));
        sendButton.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
        sendButton.setIcon(new BlackTriangleIcon());
        
        // Hover effect for send button
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sendButton.setBackground(new Color(240, 240, 240));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                sendButton.setBackground(Color.WHITE);
            }
        });
        
        // Layout
        JPanel center = new JPanel(new BorderLayout(15, 0));
        center.setBackground(Color.WHITE);
        center.add(inputField, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.add(avatarButton);
        buttonPanel.add(voiceButton);
        buttonPanel.add(fileButton);
        buttonPanel.add(sendButton);

        panel.add(center, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.EAST);
        
        return panel;
    }

    private void setupEventListeners() {
        sendButton.addActionListener(new ActionListener() { 
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage();           // G·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ client qua server
            }
        });

        inputField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    sendMessage();
                }
            }
            @Override
            public void keyReleased(KeyEvent e) {}
        });
    }

    // K·∫øt n·ªëi ƒë·∫øn server v√† x·ª≠ l√Ω lu·ªìng nh·∫≠n tin nh·∫Øn
    private void connectToServer() {
        clientName = JOptionPane.showInputDialog(frame, "Enter your name:"); 
        if (clientName == null || clientName.trim().isEmpty()) { 
            clientName = "Anonymous_" + System.currentTimeMillis(); // T·∫°o t√™n duy nh·∫•t n·∫øu tr·ªëng
        }

        frame.setTitle("üí¨ " + clientName + " - Modern Chat");      

        try {
            socket = new Socket("localhost", 5000);  
            statusLabel.setText("Connected");
            statusLabel.setForeground(new Color(0, 200, 0));
                addSystemMessage("‚úÖ Connected to server successfully!");

            out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"), true); 
            in = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8")); 

            out.println(clientName);                       

            new Thread(new Runnable() {              
                @Override
                public void run() {
                    String message;
                    try {
                        while ((message = in.readLine()) != null) { 
                            final String finalMessage = message;
                            System.out.println("Client received: " + finalMessage); // Debug log
                            
                            if (message.startsWith("[History]")) { 
                                // B·ªè qua l·ªãch s·ª≠ t·ª´ server v√¨ Client ƒë√£ t·ª± load
                                // SwingUtilities.invokeLater(() -> {
                                //     addSystemMessage(finalMessage.substring(9)); 
                                // });
                            } else if (message.startsWith("clients_status:")) { // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi nh·∫≠n + tr·∫°ng th√°i
                                String list = message.substring("clients_status:".length());
                                String[] entries = list.isEmpty() ? new String[0] : list.split(",");
                                SwingUtilities.invokeLater(() -> {
                                    contactsModel.clear();
                                    java.util.Set<String> seen = new java.util.HashSet<>();
                                    for (String e : entries) {
                                        int bar = e.indexOf('|');
                                        if (bar > -1) {
                                            String name = e.substring(0, bar).trim();
                                            String status = e.substring(bar + 1).trim();
                                            if (!name.isEmpty() && !name.equals(clientName) && !seen.contains(name)) {
                                                seen.add(name);
                                                boolean online = "online".equalsIgnoreCase(status);
                                                RecipientItem item = new RecipientItem(name, online);
                                                contactsModel.addElement(item);
                                                
                                            }
                                        }
                                    }
                                });
                            } else if (message.equals("[History Cleared]")) { 
                                if (!historyCleared) { // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o m·ªôt l·∫ßn
                                    historyCleared = true;
                                    clearChatHistoryFile(); // X√≥a file l·ªãch s·ª≠
                                    allMessages.clear(); // X√≥a tin nh·∫Øn trong memory
                                    SwingUtilities.invokeLater(() -> {
                                        // Clear chat area and show welcome message
                                        chatArea.removeAll();
                                        JPanel welcomePanel = new JPanel();
                                        welcomePanel.setLayout(new BorderLayout());
                                        welcomePanel.setBackground(Color.WHITE);
                                        
                                        JLabel welcomeLabel = new JLabel("<html><div style='color: #666; text-align: center; padding: 20px;'>" +
                                                                        "Welcome to Chat Application!<br>Select a contact to start chatting." +
                                                                        "</div></html>");
                                        welcomeLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                        welcomePanel.add(welcomeLabel, BorderLayout.CENTER);
                                        chatArea.add(welcomePanel);
                                        chatArea.revalidate();
                                        chatArea.repaint();
                                    });
                                }
                            } else if (message.startsWith("Error:")) { 
                                SwingUtilities.invokeLater(() -> {
                                    addSystemMessage("‚ùå " + finalMessage);
                                });
                            } else if (message.startsWith("Server:")) { // Ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn t·ª´ server
                                SwingUtilities.invokeLater(() -> {
                                    addSystemMessage("üñ•Ô∏è " + finalMessage);
                                });
                            } else if (message.startsWith("from:")) { // Tin nh·∫Øn tr·ª±c ti·∫øp t·ª´ client kh√°c
                                // ƒê·ªãnh d·∫°ng: from:<sender>:<content>
                                int first = message.indexOf(':');
                                int second = message.indexOf(':', first + 1);
                                if (second > -1) {
                                    String sender = message.substring(first + 1, second);
                                    String content = message.substring(second + 1);
                                    SwingUtilities.invokeLater(() -> {
                                        // L∆∞u tin nh·∫Øn v√†o danh s√°ch v·ªõi timestamp ƒë·∫øn ph√∫t
                                        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
                                        String timestamp = timeFormat.format(new java.util.Date());
                                        MessageData msgData = new MessageData(sender, clientName, content, timestamp, false);
                                        allMessages.add(msgData);
                                        saveMessageToFile(msgData); // L∆∞u v√†o file
                                        
                                        // Hi·ªÉn th·ªã tin nh·∫Øn m·ªõi n·∫øu ƒëang chat v·ªõi ng∆∞·ªùi g·ª≠i
                                        if (selectedClient != null && selectedClient.equals(sender)) {
                                            displayMessagesForClient(selectedClient);
                                        } else {
                                            // TƒÉng s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc n·∫øu kh√¥ng ƒëang chat v·ªõi ng∆∞·ªùi g·ª≠i
                                            incrementUnreadCount(sender);
                                        }
                                    });
                                }
                            } else if (message.startsWith("file:")) { // Nh·∫≠n file t·ª´ client kh√°c
                                // ƒê·ªãnh d·∫°ng: file:<sender>:<fileName>:<base64Content>
                                int first = message.indexOf(':');
                                int second = message.indexOf(':', first + 1);
                                int third = message.indexOf(':', second + 1);
                                if (third > -1) {
                                    String sender = message.substring(first + 1, second);
                                    String fileName = message.substring(second + 1, third);
                                    String base64Content = message.substring(third + 1);
                                    SwingUtilities.invokeLater(() -> {
                                        receiveFile(sender, fileName, base64Content);
                                    });
                                }
                            } else if (message.startsWith("voice:")) { // Nh·∫≠n voice t·ª´ client kh√°c
                                // ƒê·ªãnh d·∫°ng: voice:<sender>:<fileName>:<base64AudioContent>
                                int first = message.indexOf(':');
                                int second = message.indexOf(':', first + 1);
                                int third = message.indexOf(':', second + 1);
                                if (third > -1) {
                                    String sender = message.substring(first + 1, second);
                                    String fileName = message.substring(second + 1, third);
                                    String base64AudioContent = message.substring(third + 1);
                                    SwingUtilities.invokeLater(() -> {
                                        receiveVoice(sender, fileName, base64AudioContent);
                                    });
                                }
                            } else {
                                // Hi·ªÉn th·ªã t·∫•t c·∫£ tin nh·∫Øn kh√°c (ƒë·ªÉ debug)
                                SwingUtilities.invokeLater(() -> {
                                    addSystemMessage("‚ö†Ô∏è Unknown message: " + finalMessage);
                                });
                            }
                        }
                    } catch (IOException e) {             
                        SwingUtilities.invokeLater(() -> {
                            statusLabel.setText("Disconnected from server");
                            statusLabel.setForeground(new Color(200, 0, 0));
                            addSystemMessage("‚ùå Server disconnected."); 
                        });
                    }
                }
            }).start();

        } catch (IOException e) {                
            statusLabel.setText("Disconnected");
            statusLabel.setForeground(new Color(200, 0, 0));
            addSystemMessage("‚ùå Error: " + e.getMessage()); 
        }
    }

    // G·ª≠i tin nh·∫Øn ƒë·∫øn server (ch·ªâ l∆∞u v√†o l·ªãch s·ª≠ chat ri√™ng)
    private void sendMessage() {
        String message = inputField.getText().trim(); 
        RecipientItem selected = contactsList.getSelectedValue();
        String recipient = selected == null ? null : selected.name;
        
        // Ki·ªÉm tra placeholder text
        if (message.isEmpty() || message.equals("Type your message here...")) {
            return; // Kh√¥ng g·ª≠i tin nh·∫Øn r·ªóng ho·∫∑c placeholder
        }
        
        if (recipient == null || recipient.trim().isEmpty()) {
            // Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu ch·ªçn client
            SwingUtilities.invokeLater(() -> {
                JPanel errorPanel = new JPanel();
                errorPanel.setLayout(new BorderLayout());
                errorPanel.setBackground(Color.WHITE);
                
                JLabel errorLabel = new JLabel("<html><div style='color: #ffc107; text-align: center; padding: 10px;'>‚ö†Ô∏è Please select a contact to send message to.</div></html>");
                errorLabel.setHorizontalAlignment(SwingConstants.CENTER);
                errorPanel.add(errorLabel, BorderLayout.CENTER);
                chatArea.add(errorPanel);
                chatArea.revalidate();
                chatArea.repaint();
            });
            return;
        }
        
            String formatted = "to:" + recipient + ":" + message;
            out.println(formatted);              // G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp
        
        // L∆∞u tin nh·∫Øn v√†o danh s√°ch v·ªõi timestamp ƒë·∫øn ph√∫t
        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
        String timestamp = timeFormat.format(new java.util.Date());
        MessageData msgData = new MessageData(clientName, recipient, message, timestamp, true);
        allMessages.add(msgData);
        saveMessageToFile(msgData); // L∆∞u v√†o file
        
        // Hi·ªÉn th·ªã tin nh·∫Øn m·ªõi tr·ª±c ti·∫øp thay v√¨ reload to√†n b·ªô
        JPanel bubble = createMessageBubble(clientName, message, timestamp, true);
        chatArea.add(bubble);
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
        
        // Clear input field - kh√¥ng ƒë·∫∑t l·∫°i placeholder
        inputField.setText("");
        inputField.setForeground(new Color(50, 50, 50));
        historyCleared = false; // Reset flag khi g·ª≠i tin nh·∫Øn m·ªõi
    }


    // Item ng∆∞·ªùi nh·∫≠n (t√™n + tr·∫°ng th√°i)
    private static class RecipientItem {
        final String name;
        final boolean online;
        RecipientItem(String name, boolean online) {
            this.name = name;
            this.online = online;
        }
        @Override
        public String toString() {
            return name + (online ? " (Online)" : " (Offline)");
        }
    }

    // Class ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin tin nh·∫Øn
    private static class MessageData {
        String sender;
        String recipient;
        String content;
        String timestamp;
        boolean isSent; // true n·∫øu l√† tin nh·∫Øn g·ª≠i ƒëi, false n·∫øu l√† tin nh·∫Øn nh·∫≠n v·ªÅ
        
        MessageData(String sender, String recipient, String content, String timestamp, boolean isSent) {
            this.sender = sender;
            this.recipient = recipient;
            this.content = content;
            this.timestamp = timestamp;
            this.isSent = isSent;
        }
    }

    // Custom cell renderer cho danh s√°ch li√™n h·ªá
    private class ContactListCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, 
                boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            
            if (value instanceof RecipientItem) {
                RecipientItem item = (RecipientItem) value;
                
                // T·∫°o avatar tr√≤n v·ªõi ch·ªØ c√°i ƒë·∫ßu
                String firstLetter = item.name.isEmpty() ? "?" : 
                    String.valueOf(Character.toUpperCase(item.name.charAt(0)));
                
                // M√†u avatar d·ª±a tr√™n ch·ªØ c√°i ƒë·∫ßu
                Color avatarColor = getAvatarColor(firstLetter.charAt(0));
                
                // L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
                int unreadCount = unreadCounts.getOrDefault(item.name, 0);
                setIcon(new AvatarWithNotificationIcon(avatarColor, firstLetter, 45, unreadCount));
                setIconTextGap(8); // Gi·∫£m kho·∫£ng c√°ch gi·ªØa icon v√† text
                
                // Hi·ªÉn th·ªã t√™n v√† tr·∫°ng th√°i
                String statusText = item.online ? "Online" : "Offline";
                setText(item.name + " (" + statusText + ")");
                setFont(new Font("Segoe UI", Font.PLAIN, 14));
                
                // M√†u text d·ª±a tr√™n tr·∫°ng th√°i
                if (item.online) {
                    setForeground(new Color(0, 150, 0)); // Xanh l√° cho online
                } else {
                    setForeground(new Color(150, 150, 150)); // X√°m cho offline
                }
                
                // Background khi ƒë∆∞·ª£c ch·ªçn
                if (isSelected) {
                    setBackground(new Color(0, 120, 215));
                    setForeground(Color.WHITE);
                } else {
                    setBackground(Color.WHITE);
                }
            }
            
            return this;
        }
        
        private Color getAvatarColor(char firstChar) {
            Color[] colors = {
                new Color(255, 99, 132), // ƒê·ªè h·ªìng
                new Color(54, 162, 235), // Xanh d∆∞∆°ng
                new Color(255, 205, 86), // V√†ng
                new Color(75, 192, 192), // Xanh l√°
                new Color(153, 102, 255), // T√≠m
                new Color(255, 159, 64), // Cam
                new Color(199, 199, 199), // X√°m
                new Color(83, 102, 255), // Xanh ƒë·∫≠m
                new Color(255, 99, 255), // H·ªìng
                new Color(99, 255, 132)  // Xanh l√° nh·∫°t
            };
            return colors[Math.abs(firstChar) % colors.length];
        }
    }

    // Icon h√¨nh tam gi√°c m√†u ƒëen cho n√∫t send
    private static class BlackTriangleIcon implements Icon {
        private final int size = 16;
        
        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            g2d.setColor(Color.BLACK);
            
            // V·∫Ω tam gi√°c h∆∞·ªõng v·ªÅ ph·∫£i
            int[] xPoints = {x + 4, x + 4, x + 12};
            int[] yPoints = {y + 4, y + 12, y + 8};
            g2d.fillPolygon(xPoints, yPoints, 3);
            
            g2d.dispose();
        }
        
        @Override
        public int getIconWidth() { return size; }
        
        @Override
        public int getIconHeight() { return size; }
    }

    // Icon emoji c√≥ m√†u cho n√∫t emoji

    // Icon paperclip cho n√∫t g·ª≠i file
    private static class PaperclipIcon implements Icon {
        private final int size = 16;
        
        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            // V·∫Ω paperclip
            g2d.setColor(Color.BLACK);
            g2d.setStroke(new BasicStroke(2.0f));
            
            // V·∫Ω h√¨nh paperclip
            g2d.drawArc(x + 4, y + 3, 6, 4, 0, 180); // Ph·∫ßn tr√™n
            g2d.drawArc(x + 6, y + 7, 6, 4, 180, 180); // Ph·∫ßn d∆∞·ªõi
            g2d.drawLine(x + 10, y + 5, x + 10, y + 9); // ƒê∆∞·ªùng th·∫≥ng gi·ªØa
            
            g2d.dispose();
        }
        
        @Override
        public int getIconWidth() { return size; }
        
        @Override
        public int getIconHeight() { return size; }
    }

    // Icon microphone cho n√∫t voice
    private static class VoiceIcon implements Icon {
        private final int size = 16;
        
        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            // V·∫Ω microphone
            g2d.setColor(Color.BLACK);
            g2d.setStroke(new BasicStroke(2.0f));
            
            // V·∫Ω th√¢n microphone
            g2d.drawLine(x + 8, y + 2, x + 8, y + 10);
            
            // V·∫Ω ƒë·∫ßu microphone
            g2d.drawOval(x + 6, y + 2, 4, 3);
            
            // V·∫Ω ch√¢n microphone
            g2d.drawLine(x + 6, y + 10, x + 10, y + 10);
            g2d.drawLine(x + 5, y + 12, x + 11, y + 12);
            
            g2d.dispose();
        }
        
        @Override
        public int getIconWidth() { return size; }
        
        @Override
        public int getIconHeight() { return size; }
    }

    // Icon avatar v·ªõi th√¥ng b√°o s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
    private static class AvatarWithNotificationIcon implements Icon {
        private final Color backgroundColor;
        private final String text;
        private final int size;
        private final int unreadCount;
        
        public AvatarWithNotificationIcon(Color backgroundColor, String text, int size, int unreadCount) {
            this.backgroundColor = backgroundColor;
            this.text = text;
            this.size = size;
            this.unreadCount = unreadCount;
        }
        
        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            // V·∫Ω h√¨nh tr√≤n avatar
            g2d.setColor(backgroundColor);
            g2d.fillOval(x, y, size, size);
            
            // V·∫Ω ch·ªØ c√°i
            g2d.setColor(Color.WHITE);
            g2d.setFont(new Font("Segoe UI", Font.BOLD, size / 2));
            FontMetrics fm = g2d.getFontMetrics();
            int textX = x + (size - fm.stringWidth(text)) / 2;
            int textY = y + (size + fm.getAscent()) / 2 - 2;
            g2d.drawString(text, textX, textY);
            
            // V·∫Ω th√¥ng b√°o s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
            if (unreadCount > 0) {
                // V·∫Ω h√¨nh tr√≤n ƒë·ªè cho th√¥ng b√°o
                int badgeSize = Math.min(size / 3, 12);
                int badgeX = x + size - badgeSize;
                int badgeY = y;
                
                g2d.setColor(Color.RED);
                g2d.fillOval(badgeX, badgeY, badgeSize, badgeSize);
                
                // V·∫Ω s·ªë
                g2d.setColor(Color.WHITE);
                g2d.setFont(new Font("Segoe UI", Font.BOLD, badgeSize / 2));
                String countText = unreadCount > 99 ? "99+" : String.valueOf(unreadCount);
                FontMetrics badgeFm = g2d.getFontMetrics();
                int badgeTextX = badgeX + (badgeSize - badgeFm.stringWidth(countText)) / 2;
                int badgeTextY = badgeY + (badgeSize + badgeFm.getAscent()) / 2 - 1;
                g2d.drawString(countText, badgeTextX, badgeTextY);
            }
            
            g2d.dispose();
        }
        
        @Override
        public int getIconWidth() { return size; }
        
        @Override
        public int getIconHeight() { return size; }
    }



    // Custom method to set placeholder text for JTextField
    private void setPlaceholderText(JTextField textField, String placeholder) {
        textField.setText(placeholder);
        textField.setForeground(new Color(150, 150, 150));
        
        textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (textField.getText().equals(placeholder)) {
                    textField.setText("");
                    textField.setForeground(new Color(50, 50, 50));
                }
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                // Kh√¥ng t·ª± ƒë·ªông set l·∫°i placeholder ƒë·ªÉ tr√°nh hi·ªÉn th·ªã khi g·ª≠i tin nh·∫Øn
                // Placeholder ch·ªâ hi·ªÉn th·ªã khi field th·ª±c s·ª± tr·ªëng v√† kh√¥ng c√≥ n·ªôi dung
            }
        });
        
        // Th√™m listener ƒë·ªÉ clear placeholder khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu g√µ
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if (textField.getText().equals(placeholder)) {
                    textField.setText("");
                    textField.setForeground(new Color(50, 50, 50));
                }
            }
        });
    }


   // Method to create message bubble JPanel
private JPanel createMessageBubble(String sender, String content, String timestamp, boolean isSent) {
    JPanel bubblePanel = new JPanel(new BorderLayout());
    bubblePanel.setOpaque(false);
    bubblePanel.setBorder(new EmptyBorder(0, 0, 0, 0)); // Kh√¥ng c√≥ margin ngo√†i

    // Bubble container (custom paint ƒë·ªÉ bo tr√≤n)
    JPanel bubbleContainer = new JPanel(new BorderLayout()) {
        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // M√†u n·ªÅn theo lo·∫°i tin nh·∫Øn
            if (isSent) {
                g2.setColor(new Color(0, 120, 215)); // Xanh d∆∞∆°ng cho tin nh·∫Øn g·ª≠i
            } else {
                g2.setColor(new Color(240, 240, 240)); // X√°m nh·∫°t cho tin nh·∫Øn nh·∫≠n
            }

            // V·∫Ω h√¨nh bo tr√≤n (corner radius = 20)
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);

            super.paintComponent(g);
        }
    };

    bubbleContainer.setOpaque(false);
    bubbleContainer.setBorder(new EmptyBorder(8, 12, 8, 12)); // TƒÉng padding ƒë·ªÉ bubble l·ªõn h∆°n

    // N·ªôi dung tin nh·∫Øn
    JLabel messageLabel = new JLabel(content);
    messageLabel.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 16)); // TƒÉng font size t·ª´ 14 l√™n 16
    messageLabel.setOpaque(false);

    if (isSent) {
        messageLabel.setForeground(Color.WHITE);
    } else {
        messageLabel.setForeground(Color.BLACK);
    }

    // Th·ªùi gian g·ª≠i
    JLabel timeLabel = new JLabel(timestamp);
    timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12)); // TƒÉng font size t·ª´ 10 l√™n 12
    timeLabel.setOpaque(false);
    if (isSent) {
        timeLabel.setForeground(Color.WHITE);
    } else {
        timeLabel.setForeground(new Color(100, 100, 100));
    }

    // Panel ch·ª©a n·ªôi dung v√† th·ªùi gian
    JPanel contentPanel = new JPanel(new BorderLayout(0, 0)); // Kh√¥ng c√≥ kho·∫£ng c√°ch d·ªçc gi·ªØa message v√† time
    contentPanel.setOpaque(false);
    contentPanel.add(messageLabel, BorderLayout.CENTER);
    contentPanel.add(timeLabel, BorderLayout.SOUTH);

    bubbleContainer.add(contentPanel, BorderLayout.CENTER);

    // CƒÉn l·ªÅ tr√°i/ph·∫£i t√πy tin nh·∫Øn g·ª≠i hay nh·∫≠n
    JPanel mainContainer = new JPanel(new FlowLayout(isSent ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0));
    mainContainer.setOpaque(false);
    mainContainer.add(bubbleContainer);

    bubblePanel.add(mainContainer, BorderLayout.CENTER);

    return bubblePanel;
}

    // Method to display messages for selected client
    private void displayMessagesForClient(String clientName) {
        chatArea.removeAll();
        
        if (clientName == null) {
            // Hi·ªÉn th·ªã welcome message
            JPanel welcomePanel = new JPanel();
            welcomePanel.setLayout(new BorderLayout());
            welcomePanel.setBackground(Color.WHITE);
            
            JLabel welcomeLabel = new JLabel("<html><div style='color: #666; text-align: center; padding: 10px;'>" +
                                            "Welcome to Chat Application!<br>Select a contact to start chatting." +
                                            "</div></html>");
            welcomeLabel.setHorizontalAlignment(SwingConstants.CENTER);
            welcomePanel.add(welcomeLabel, BorderLayout.CENTER);
            chatArea.add(welcomePanel);
        } else {
            // Hi·ªÉn th·ªã tin nh·∫Øn v·ªõi client ƒë∆∞·ª£c ch·ªçn
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.fill = GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            gbc.insets = new Insets(0, 0, 2, 0); // Kho·∫£ng c√°ch d∆∞·ªõi 2px
            
            for (MessageData msg : allMessages) {
                if ((msg.isSent && msg.recipient.equals(clientName)) || 
                    (!msg.isSent && msg.sender.equals(clientName))) {
                    JPanel bubble = createMessageBubble(msg.sender, msg.content, msg.timestamp, msg.isSent);
                    chatArea.add(bubble, gbc);
                    gbc.gridy++; // TƒÉng d√≤ng ti·∫øp theo
                }
            }
        }
        
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
    }
    // Method to add system message to chat
    private void addSystemMessage(String message) {
        JPanel systemPanel = new JPanel();
        systemPanel.setLayout(new BorderLayout());
        systemPanel.setBackground(Color.WHITE);
        
        JLabel systemLabel = new JLabel("<html><div style='color: #666; text-align: center; padding: 10px;'>" + message + "</div></html>");
        systemLabel.setHorizontalAlignment(SwingConstants.CENTER);
        systemPanel.add(systemLabel, BorderLayout.CENTER);
        
        chatArea.add(systemPanel);
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
    }

    // Method to scroll to bottom of chat area
    private void scrollToBottom() {
        SwingUtilities.invokeLater(() -> {
            JScrollBar vertical = chatScrollPane.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        });
    }

    // Method to update selected contact information
    private void updateSelectedContact(RecipientItem item) {
        SwingUtilities.invokeLater(() -> {
            userNameLabel.setText(item.name);
            userStatusLabel.setText(item.online ? "Online" : "Offline");
            userStatusLabel.setForeground(item.online ? new Color(0, 150, 0) : new Color(150, 150, 150));
            
            // Update avatar
            String firstLetter = item.name.isEmpty() ? "?" : 
                String.valueOf(Character.toUpperCase(item.name.charAt(0)));
            avatarLabel.setText(firstLetter);
            
            // Update avatar color
            Color avatarColor = getAvatarColor(firstLetter.charAt(0));
            avatarLabel.setBackground(avatarColor);
            
            // C·∫≠p nh·∫≠t selected client v√† hi·ªÉn th·ªã tin nh·∫Øn
            selectedClient = item.name;
            displayMessagesForClient(selectedClient);
            
            // X√≥a th√¥ng b√°o ch∆∞a ƒë·ªçc khi ch·ªçn client
            clearUnreadCount(selectedClient);
        });
    }

    // Method to get avatar color based on first character
    private Color getAvatarColor(char firstChar) {
        Color[] colors = {
            new Color(255, 99, 132), // ƒê·ªè h·ªìng
            new Color(54, 162, 235), // Xanh d∆∞∆°ng
            new Color(255, 205, 86), // V√†ng
            new Color(75, 192, 192), // Xanh l√°
            new Color(153, 102, 255), // T√≠m
            new Color(255, 159, 64), // Cam
            new Color(199, 199, 199), // X√°m
            new Color(83, 102, 255), // Xanh ƒë·∫≠m
            new Color(255, 99, 255), // H·ªìng
            new Color(99, 255, 132)  // Xanh l√° nh·∫°t
        };
        return colors[Math.abs(firstChar) % colors.length];
    }



    // Method to update unread count for a client
    private void updateUnreadCount(String clientName, int count) {
        unreadCounts.put(clientName, count);
        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch li√™n h·ªá ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o m·ªõi
        contactsList.repaint();
    }

    // Method to increment unread count for a client
    private void incrementUnreadCount(String clientName) {
        int currentCount = unreadCounts.getOrDefault(clientName, 0);
        updateUnreadCount(clientName, currentCount + 1);
    }

    // Method to clear unread count for a client
    private void clearUnreadCount(String clientName) {
        updateUnreadCount(clientName, 0);
    }

    // Method to send file
    private void sendFile() {
        RecipientItem selected = contactsList.getSelectedValue();
        String recipient = selected == null ? null : selected.name;
        
        if (recipient == null || recipient.trim().isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                addSystemMessage("‚ö†Ô∏è Please select a contact to send file to.");
            });
            return;
        }
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select file to send");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        // Th√™m c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
        fileChooser.setControlButtonsAreShown(true);
        fileChooser.setAcceptAllFileFilterUsed(true);
        
        // Thi·∫øt l·∫≠p th∆∞ m·ª•c m·∫∑c ƒë·ªãnh
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        int result = fileChooser.showOpenDialog(frame);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String fileName = selectedFile.getName();
            long fileSize = selectedFile.length();
            
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (gi·ªõi h·∫°n 10MB)
            if (fileSize > 10 * 1024 * 1024) {
                SwingUtilities.invokeLater(() -> {
                    addSystemMessage("‚ùå File size too large! Maximum 10MB allowed.");
                });
                return;
            }
            
            try {
                // ƒê·ªçc file th√†nh byte array
                byte[] fileBytes = java.nio.file.Files.readAllBytes(selectedFile.toPath());
                String base64File = java.util.Base64.getEncoder().encodeToString(fileBytes);
                
                // G·ª≠i file qua server
                String fileMessage = "file:" + recipient + ":" + fileName + ":" + base64File;
                out.println(fileMessage);
                
                // Hi·ªÉn th·ªã file ƒë√£ g·ª≠i trong chat - ph√¢n bi·ªát ·∫£nh v√† file th∆∞·ªùng
                if (isImageFile(fileName)) {
                    displaySentImageInChat(fileName, fileBytes, recipient);
                } else {
                    displaySentFileInChat(fileName, fileSize, recipient);
                }
                
                // Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o sent file n·ªØa
                
            } catch (IOException e) {
                SwingUtilities.invokeLater(() -> {
                    addSystemMessage("‚ùå Error reading file: " + e.getMessage());
                });
            }
        } else if (result == JFileChooser.CANCEL_OPTION) {
            // Ng∆∞·ªùi d√πng h·ªßy ho·∫∑c quay l·∫°i
            SwingUtilities.invokeLater(() -> {
                addSystemMessage("üìÅ File selection cancelled");
            });
        }
    }
    
    // Method to format file size
    
    // Method to show emoji picker
    
    // Method to receive file
    private void receiveFile(String sender, String fileName, String base64Content) {
        try {
            // Decode base64 content
            byte[] fileBytes = java.util.Base64.getDecoder().decode(base64Content);
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i file ·∫£nh kh√¥ng
            boolean isImage = isImageFile(fileName);
            
            if (isImage) {
                // Hi·ªÉn th·ªã ·∫£nh trong chat
                displayImageInChat(sender, fileName, fileBytes);
            } else {
                // Hi·ªÉn th·ªã preview dialog
                FilePreviewDialog previewDialog = new FilePreviewDialog(frame, sender, fileName, fileBytes);
                previewDialog.setVisible(true);
                
                // File th∆∞·ªùng - hi·ªÉn th·ªã th√¥ng b√°o v√† cho ph√©p t·∫£i v·ªÅ
                displayFileInChat(sender, fileName, fileBytes);
            }
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error receiving file: " + e.getMessage());
        }
    }
    
    // Hi·ªÉn th·ªã file ƒë√£ g·ª≠i trong chat
    private void displaySentFileInChat(String fileName, long fileSize, String recipient) {
        // T·∫°o timestamp
        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
        String timestamp = timeFormat.format(new java.util.Date());
        
        // L∆∞u tin nh·∫Øn file v√†o danh s√°ch
        String fileContent = "üìé " + fileName + " (" + formatFileSize(fileSize) + ")";
        MessageData msgData = new MessageData(clientName, recipient, fileContent, timestamp, true);
        allMessages.add(msgData);
        saveMessageToFile(msgData); // L∆∞u v√†o file
        
        // T·∫°o panel cho file ƒë√£ g·ª≠i v·ªõi bubble style
        JPanel filePanel = new JPanel(new BorderLayout());
        filePanel.setOpaque(false);
        filePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        
        // T·∫°o bubble container cho file
        JPanel bubbleContainer = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // M√†u xanh d∆∞∆°ng cho file ƒë√£ g·ª≠i
                g2.setColor(new Color(0, 120, 215));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                
                super.paintComponent(g);
            }
        };
        
        bubbleContainer.setOpaque(false);
        bubbleContainer.setBorder(new EmptyBorder(8, 12, 8, 12));
        
        JLabel fileLabel = new JLabel("üìé " + fileName + " (" + formatFileSize(fileSize) + ")");
        fileLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        fileLabel.setForeground(Color.WHITE);
        fileLabel.setOpaque(false);
        
        // Th√™m timestamp
        JLabel timeLabel = new JLabel(timestamp);
        timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        timeLabel.setForeground(new Color(200, 200, 200));
        timeLabel.setOpaque(false);
        
        // Panel ch·ª©a file v√† timestamp
        JPanel contentPanel = new JPanel(new BorderLayout(0, 5));
        contentPanel.setOpaque(false);
        contentPanel.add(fileLabel, BorderLayout.CENTER);
        contentPanel.add(timeLabel, BorderLayout.SOUTH);
        
        bubbleContainer.add(contentPanel, BorderLayout.CENTER);
        
        // CƒÉn ph·∫£i cho file ƒë√£ g·ª≠i
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));
        rightPanel.setOpaque(false);
        rightPanel.add(bubbleContainer);
        
        filePanel.add(rightPanel, BorderLayout.CENTER);
        
        // Th√™m v√†o chat area
        chatArea.add(filePanel);
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
    }
    
    // Hi·ªÉn th·ªã ·∫£nh ƒë√£ g·ª≠i trong chat
    private void displaySentImageInChat(String fileName, byte[] fileBytes, String recipient) {
        try {
            // T·∫°o timestamp
            java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
            String timestamp = timeFormat.format(new java.util.Date());
            
            // L∆∞u tin nh·∫Øn ·∫£nh v√†o danh s√°ch
            String imageContent = "üñºÔ∏è " + fileName + " (" + formatFileSize(fileBytes.length) + ")";
            MessageData msgData = new MessageData(clientName, recipient, imageContent, timestamp, true);
            allMessages.add(msgData);
            saveMessageToFile(msgData); // L∆∞u v√†o file
            
            // T·∫°o ImageIcon t·ª´ byte array
            ImageIcon imageIcon = new ImageIcon(fileBytes);
            Image image = imageIcon.getImage();
            
            // Resize ·∫£nh n·∫øu qu√° l·ªõn (max 200x200)
            int maxWidth = 200;
            int maxHeight = 200;
            int originalWidth = image.getWidth(null);
            int originalHeight = image.getHeight(null);
            
            int newWidth = originalWidth;
            int newHeight = originalHeight;
            
            if (originalWidth > maxWidth || originalHeight > maxHeight) {
                double scaleX = (double) maxWidth / originalWidth;
                double scaleY = (double) maxHeight / originalHeight;
                double scale = Math.min(scaleX, scaleY);
                
                newWidth = (int) (originalWidth * scale);
                newHeight = (int) (originalHeight * scale);
            }
            
            Image resizedImage = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            ImageIcon resizedIcon = new ImageIcon(resizedImage);
            
            // T·∫°o panel cho ·∫£nh ƒë√£ g·ª≠i v·ªõi bubble style
            JPanel imagePanel = new JPanel(new BorderLayout());
            imagePanel.setOpaque(false);
            imagePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
            
            // T·∫°o bubble container cho ·∫£nh
            JPanel bubbleContainer = new JPanel(new BorderLayout()) {
                @Override
                protected void paintComponent(Graphics g) {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    
                    // M√†u xanh d∆∞∆°ng cho ·∫£nh ƒë√£ g·ª≠i
                    g2.setColor(new Color(0, 120, 215));
                    g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                    
                    super.paintComponent(g);
                }
            };
            
            bubbleContainer.setOpaque(false);
            bubbleContainer.setBorder(new EmptyBorder(8, 12, 8, 12));
            
            // T·∫°o label cho ·∫£nh
            JLabel imageLabel = new JLabel(resizedIcon);
            imageLabel.setOpaque(false);
            
            // Th√™m timestamp
            JLabel timeLabel = new JLabel(timestamp);
            timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            timeLabel.setForeground(new Color(200, 200, 200));
            timeLabel.setOpaque(false);
            
            // Panel ch·ª©a ·∫£nh v√† timestamp
            JPanel contentPanel = new JPanel(new BorderLayout(0, 5));
            contentPanel.setOpaque(false);
            contentPanel.add(imageLabel, BorderLayout.CENTER);
            contentPanel.add(timeLabel, BorderLayout.SOUTH);
            
            bubbleContainer.add(contentPanel, BorderLayout.CENTER);
            
            // Panel b√™n ph·∫£i ƒë·ªÉ cƒÉn ·∫£nh sang ph·∫£i
            JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));
            rightPanel.setOpaque(false);
            rightPanel.add(bubbleContainer);
            
            imagePanel.add(rightPanel, BorderLayout.CENTER);
            
            // Th√™m v√†o chat area
            chatArea.add(imagePanel);
            chatArea.revalidate();
            chatArea.repaint();
            scrollToBottom();
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error displaying sent image: " + e.getMessage());
        }
    }
    
    // Hi·ªÉn th·ªã ·∫£nh trong chat
    private void displayImageInChat(String sender, String fileName, byte[] fileBytes) {
        try {
            // T·∫°o timestamp
            java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
            String timestamp = timeFormat.format(new java.util.Date());
            
            // L∆∞u tin nh·∫Øn ·∫£nh v√†o danh s√°ch
            String imageContent = "üñºÔ∏è " + fileName + " (" + formatFileSize(fileBytes.length) + ")";
            MessageData msgData = new MessageData(sender, clientName, imageContent, timestamp, false);
            allMessages.add(msgData);
            saveMessageToFile(msgData); // L∆∞u v√†o file
            
            // T·∫°o ImageIcon t·ª´ byte array
            ImageIcon imageIcon = new ImageIcon(fileBytes);
            Image image = imageIcon.getImage();
            
            // Resize ·∫£nh n·∫øu qu√° l·ªõn (max width: 300px)
            int maxWidth = 300;
            int originalWidth = image.getWidth(null);
            int originalHeight = image.getHeight(null);
            
            if (originalWidth > maxWidth) {
                int newHeight = (originalHeight * maxWidth) / originalWidth;
                image = image.getScaledInstance(maxWidth, newHeight, Image.SCALE_SMOOTH);
                imageIcon = new ImageIcon(image);
            }
            
            // T·∫°o panel cho ·∫£nh
            JPanel imagePanel = new JPanel(new BorderLayout());
            imagePanel.setOpaque(false);
            imagePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
            
            JLabel imageLabel = new JLabel(imageIcon);
            imageLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
            
            // Th√™m click listener ƒë·ªÉ t·∫£i v·ªÅ
            imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    downloadFile(sender, fileName, fileBytes);
                }
            });
            
            // Th√™m tooltip
            imageLabel.setToolTipText("Click to download: " + fileName);
            
            imagePanel.add(imageLabel, BorderLayout.CENTER);
            
            // Th√™m label t√™n file v√† timestamp
            JPanel infoPanel = new JPanel(new BorderLayout());
            infoPanel.setOpaque(false);
            
            JLabel fileNameLabel = new JLabel(fileName);
            fileNameLabel.setFont(new Font("Segoe UI", Font.PLAIN, 10));
            fileNameLabel.setForeground(new Color(100, 100, 100));
            fileNameLabel.setHorizontalAlignment(SwingConstants.CENTER);
            
            JLabel timeLabel = new JLabel(timestamp);
            timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 9));
            timeLabel.setForeground(new Color(150, 150, 150));
            timeLabel.setHorizontalAlignment(SwingConstants.CENTER);
            
            infoPanel.add(fileNameLabel, BorderLayout.CENTER);
            infoPanel.add(timeLabel, BorderLayout.SOUTH);
            imagePanel.add(infoPanel, BorderLayout.SOUTH);
            
            // Th√™m v√†o chat area
            chatArea.add(imagePanel);
            chatArea.revalidate();
            chatArea.repaint();
            scrollToBottom();
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error displaying image: " + e.getMessage());
        }
    }
    
    // Hi·ªÉn th·ªã file th∆∞·ªùng trong chat
    private void displayFileInChat(String sender, String fileName, byte[] fileBytes) {
        // T·∫°o timestamp
        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
        String timestamp = timeFormat.format(new java.util.Date());
        
        // L∆∞u tin nh·∫Øn file v√†o danh s√°ch
        String fileContent = "üìé " + fileName + " (" + formatFileSize(fileBytes.length) + ")";
        MessageData msgData = new MessageData(sender, clientName, fileContent, timestamp, false);
        allMessages.add(msgData);
        saveMessageToFile(msgData); // L∆∞u v√†o file
        
        // T·∫°o panel cho file
        JPanel filePanel = new JPanel(new BorderLayout());
        filePanel.setOpaque(false);
        filePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        
        JLabel fileLabel = new JLabel("üìé " + fileName + " (" + formatFileSize(fileBytes.length) + ")");
        fileLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        fileLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        fileLabel.setForeground(new Color(0, 120, 215));
        
        // Th√™m click listener ƒë·ªÉ t·∫£i v·ªÅ
        fileLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadFile(sender, fileName, fileBytes);
            }
        });
        
        fileLabel.setToolTipText("Click to download: " + fileName);
        
        // Th√™m timestamp
        JLabel timeLabel = new JLabel(timestamp);
        timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 10));
        timeLabel.setForeground(new Color(150, 150, 150));
        
        // Panel ch·ª©a file v√† timestamp
        JPanel contentPanel = new JPanel(new BorderLayout(0, 2));
        contentPanel.setOpaque(false);
        contentPanel.add(fileLabel, BorderLayout.CENTER);
        contentPanel.add(timeLabel, BorderLayout.SOUTH);
        
        filePanel.add(contentPanel, BorderLayout.CENTER);
        
        // Th√™m v√†o chat area
        chatArea.add(filePanel);
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
    }
    
    // Nh·∫≠n voice message
    private void receiveVoice(String sender, String fileName, String base64AudioContent) {
        try {
            // Decode base64 audio content
            byte[] audioBytes = java.util.Base64.getDecoder().decode(base64AudioContent);
            
            // T·∫°o timestamp
            java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
            String timestamp = timeFormat.format(new java.util.Date());
            
            // L∆∞u tin nh·∫Øn voice v√†o danh s√°ch
            String voiceContent = "üé§ Voice message";
            MessageData msgData = new MessageData(sender, clientName, voiceContent, timestamp, false);
            allMessages.add(msgData);
            saveMessageToFile(msgData);
            
            // Hi·ªÉn th·ªã voice message trong chat
            displayReceivedVoiceInChat(sender, fileName, audioBytes, timestamp);
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error receiving voice message: " + e.getMessage());
        }
    }
    
    // Hi·ªÉn th·ªã voice message ƒë√£ nh·∫≠n
    private void displayReceivedVoiceInChat(String sender, String fileName, byte[] audioBytes, String timestamp) {
        // T·∫°o panel cho voice message ƒë√£ nh·∫≠n
        JPanel voicePanel = new JPanel(new BorderLayout());
        voicePanel.setOpaque(false);
        voicePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        
        JLabel voiceLabel = new JLabel("üé§ Voice message");
        voiceLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        voiceLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        voiceLabel.setForeground(new Color(0, 120, 215));
        
        // Th√™m click listener ƒë·ªÉ ph√°t voice
        voiceLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playVoiceMessage(audioBytes);
            }
        });
        
        voiceLabel.setToolTipText("Click to play voice message");
        
        // Th√™m timestamp
        JLabel timeLabel = new JLabel(timestamp);
        timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 10));
        timeLabel.setForeground(new Color(150, 150, 150));
        
        // Panel ch·ª©a voice v√† timestamp
        JPanel contentPanel = new JPanel(new BorderLayout(0, 2));
        contentPanel.setOpaque(false);
        contentPanel.add(voiceLabel, BorderLayout.CENTER);
        contentPanel.add(timeLabel, BorderLayout.SOUTH);
        
        voicePanel.add(contentPanel, BorderLayout.CENTER);
        
        // Th√™m v√†o chat area
        chatArea.add(voicePanel);
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
    }
    
    // Ph√°t voice message
    private void playVoiceMessage(byte[] audioBytes) {
        try {
            // T·∫°o AudioFormat cho playback
            AudioFormat playbackFormat = new AudioFormat(16000, 16, 1, true, false);
            
            // T·∫°o AudioInputStream t·ª´ byte array
            ByteArrayInputStream bais = new ByteArrayInputStream(audioBytes);
            AudioInputStream audioInputStream = new AudioInputStream(bais, playbackFormat, audioBytes.length / playbackFormat.getFrameSize());
            
            // Ph√°t audio
            Clip clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
            
            addSystemMessage("üîä Playing voice message...");
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error playing voice message: " + e.getMessage());
        }
    }

    // T·∫£i file v·ªÅ m√°y
    private void downloadFile(String sender, String fileName, byte[] fileBytes) {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save file as...");
            fileChooser.setSelectedFile(new File(fileName));
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home"), "Downloads"));
            
            int result = fileChooser.showSaveDialog(frame);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                java.nio.file.Files.write(selectedFile.toPath(), fileBytes);
                
                addSystemMessage("‚úÖ File saved to: " + selectedFile.getAbsolutePath());
                
                // H·ªèi c√≥ mu·ªën m·ªü file kh√¥ng
            int option = JOptionPane.showConfirmDialog(frame, 
                    "File saved successfully!\n\nDo you want to open the file?", 
                    "File Saved", 
                JOptionPane.YES_NO_OPTION);
            
            if (option == JOptionPane.YES_OPTION) {
                try {
                        Desktop.getDesktop().open(selectedFile);
                } catch (IOException e) {
                    addSystemMessage("‚ö†Ô∏è Could not open file: " + e.getMessage());
                    }
                }
            }
        } catch (Exception e) {
            addSystemMessage("‚ùå Error saving file: " + e.getMessage());
        }
    }

    // L∆∞u tin nh·∫Øn v√†o file l·ªãch s·ª≠
    private void saveMessageToFile(MessageData msg) {
        try {
            String fileName = clientName + "_chat_history.txt";
            try (PrintWriter writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(fileName, true), "UTF-8"))) {
                String formattedMessage = String.format("[%s] %s -> %s: %s", 
                    msg.timestamp, msg.sender, msg.recipient, msg.content);
                writer.println(formattedMessage);
            }
        } catch (IOException e) {
            System.err.println("Error saving message to file: " + e.getMessage());
        }
    }

    // T·∫£i l·ªãch s·ª≠ chat t·ª´ file khi kh·ªüi ƒë·ªông
    private void loadChatHistory() {
        try {
            String fileName = clientName + "_chat_history.txt";
            File file = new File(fileName);
            if (!file.exists()) {
                return; // File kh√¥ng t·ªìn t·∫°i, kh√¥ng c·∫ßn t·∫£i
            }

            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    // Parse format: [timestamp] sender -> recipient: content
                    if (line.startsWith("[") && line.contains("] ")) {
                        int endBracket = line.indexOf("] ");
                        if (endBracket > 0) {
                            String timestamp = line.substring(1, endBracket);
                            String rest = line.substring(endBracket + 2);
                            
                            if (rest.contains(" -> ")) {
                                String[] parts = rest.split(" -> ", 2);
                                if (parts.length == 2 && parts[1].contains(": ")) {
                                    String sender = parts[0];
                                    String[] recipientContent = parts[1].split(": ", 2);
                                    if (recipientContent.length == 2) {
                                        String recipient = recipientContent[0];
                                        String content = recipientContent[1];
                                        
                                        boolean isSent = sender.equals(clientName);
                                        MessageData msgData = new MessageData(sender, recipient, content, timestamp, isSent);
                                        allMessages.add(msgData);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error loading chat history: " + e.getMessage());
        }
    }

    // X√≥a file l·ªãch s·ª≠ chat
    private void clearChatHistoryFile() {
        try {
            String fileName = clientName + "_chat_history.txt";
            File file = new File(fileName);
            if (file.exists()) {
                file.delete();
            }
        } catch (Exception e) {
            System.err.println("Error clearing chat history file: " + e.getMessage());
        }
    }


    // Voice chat methods
    private void toggleVoiceRecording() {
        if (isRecording.get()) {
            stopVoiceRecording();
        } else {
            startVoiceRecording();
        }
    }
    
    private void startVoiceRecording() {
        try {
            // Thi·∫øt l·∫≠p audio format
            audioFormat = new AudioFormat(16000, 16, 1, true, false);
            
            // M·ªü microphone
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, audioFormat);
            if (!AudioSystem.isLineSupported(info)) {
                addSystemMessage("‚ùå Microphone not supported or not available");
                return;
            }
            
            microphone = (TargetDataLine) AudioSystem.getLine(info);
            microphone.open(audioFormat);
            
            // Kh·ªüi t·∫°o buffer
            audioBuffer = new ByteArrayOutputStream();
            
            // B·∫Øt ƒë·∫ßu recording
            microphone.start();
            isRecording.set(true);
            
            // C·∫≠p nh·∫≠t UI
            SwingUtilities.invokeLater(() -> {
                voiceButton.setBackground(new Color(255, 100, 100)); // M√†u ƒë·ªè khi ƒëang ghi
                voiceButton.setToolTipText("Click to stop recording");
                addSystemMessage("üé§ Recording voice message... (Speak now)");
            });
            
            // Thread ƒë·ªÉ ƒë·ªçc audio data
            new Thread(() -> {
                byte[] buffer = new byte[1024];
                while (isRecording.get() && microphone.isActive()) {
                    try {
                        int bytesRead = microphone.read(buffer, 0, buffer.length);
                        if (bytesRead > 0) {
                            audioBuffer.write(buffer, 0, bytesRead);
                        }
                    } catch (Exception ex) {
                        break;
                    }
                }
            }).start();
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error starting voice recording: " + e.getMessage());
            isRecording.set(false);
        }
    }
    
    private void stopVoiceRecording() {
        try {
            isRecording.set(false);
            
            // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ thread recording k·∫øt th√∫c
            Thread.sleep(100);
            
            if (microphone != null) {
                microphone.stop();
                microphone.close();
            }
            
            // L·∫•y audio data
            byte[] audioData = audioBuffer != null ? audioBuffer.toByteArray() : new byte[0];
            
            // C·∫≠p nh·∫≠t UI
            SwingUtilities.invokeLater(() -> {
                voiceButton.setBackground(Color.WHITE);
                voiceButton.setToolTipText("Click to record voice");
                
                // Ki·ªÉm tra audio data c√≥ ƒë·ªß l·ªõn kh√¥ng (√≠t nh·∫•t 2KB)
                if (audioData.length > 2048) {
                    sendVoiceMessage(audioData);
                    addSystemMessage("‚úÖ Voice message sent! (" + formatFileSize(audioData.length) + ")");
                } else {
                    addSystemMessage("‚ö†Ô∏è Recording too short (" + formatFileSize(audioData.length) + "). Please record longer.");
                }
            });
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error stopping voice recording: " + e.getMessage());
        }
    }
    
    private void sendVoiceMessage(byte[] audioData) {
        RecipientItem selected = contactsList.getSelectedValue();
        String recipient = selected == null ? null : selected.name;
        
        if (recipient == null || recipient.trim().isEmpty()) {
            addSystemMessage("‚ö†Ô∏è Please select a contact to send voice message to.");
            return;
        }
        
        try {
            // Encode audio data to base64
            String base64Audio = java.util.Base64.getEncoder().encodeToString(audioData);
            
            // G·ª≠i voice message qua server
            String voiceMessage = "voice:" + recipient + ":voice_message.wav:" + base64Audio;
            out.println(voiceMessage);
            
            // Hi·ªÉn th·ªã voice message ƒë√£ g·ª≠i trong chat
            displaySentVoiceInChat(recipient);
            
        } catch (Exception e) {
            addSystemMessage("‚ùå Error sending voice message: " + e.getMessage());
        }
    }
    
    private void displaySentVoiceInChat(String recipient) {
        // T·∫°o timestamp
        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat("HH:mm");
        String timestamp = timeFormat.format(new java.util.Date());
        
        // L∆∞u tin nh·∫Øn voice v√†o danh s√°ch
        String voiceContent = "üé§ Voice message";
        MessageData msgData = new MessageData(clientName, recipient, voiceContent, timestamp, true);
        allMessages.add(msgData);
        saveMessageToFile(msgData);
        
        // T·∫°o panel cho voice message ƒë√£ g·ª≠i
        JPanel voicePanel = new JPanel(new BorderLayout());
        voicePanel.setOpaque(false);
        voicePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        
        // T·∫°o bubble container cho voice
        JPanel bubbleContainer = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // M√†u xanh d∆∞∆°ng cho voice ƒë√£ g·ª≠i
                g2.setColor(new Color(0, 120, 215));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                
                super.paintComponent(g);
            }
        };
        
        bubbleContainer.setOpaque(false);
        bubbleContainer.setBorder(new EmptyBorder(8, 12, 8, 12));
        
        JLabel voiceLabel = new JLabel("üé§ Voice message");
        voiceLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        voiceLabel.setForeground(Color.WHITE);
        voiceLabel.setOpaque(false);
        
        // Th√™m timestamp
        JLabel timeLabel = new JLabel(timestamp);
        timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        timeLabel.setForeground(new Color(200, 200, 200));
        timeLabel.setOpaque(false);
        
        // Panel ch·ª©a voice v√† timestamp
        JPanel contentPanel = new JPanel(new BorderLayout(0, 5));
        contentPanel.setOpaque(false);
        contentPanel.add(voiceLabel, BorderLayout.CENTER);
        contentPanel.add(timeLabel, BorderLayout.SOUTH);
        
        bubbleContainer.add(contentPanel, BorderLayout.CENTER);
        
        // CƒÉn ph·∫£i cho voice ƒë√£ g·ª≠i
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));
        rightPanel.setOpaque(false);
        rightPanel.add(bubbleContainer);
        
        voicePanel.add(rightPanel, BorderLayout.CENTER);
        
        // Th√™m v√†o chat area
        chatArea.add(voicePanel);
        chatArea.revalidate();
        chatArea.repaint();
        scrollToBottom();
    }
    
    // Avatar picker method
    private void showAvatarPicker() {
        String[] avatars = {
            "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá",
            "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö",
            "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©",
            "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ", "‚òπÔ∏è", "üò£",
            "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§¨",
            "ü§Ø", "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó",
            "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨", "üôÑ", "üòØ",
            "üò¶", "üòß", "üòÆ", "üò≤", "ü•±", "üò¥", "ü§§", "üò™", "üòµ", "ü§ê",
            "ü•¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑", "ü§í", "ü§ï", "ü§ë", "ü§†", "üòà",
            "üëø", "üëπ", "üë∫", "ü§°", "üí©", "üëª", "üíÄ", "‚ò†Ô∏è", "üëΩ", "üëæ"
        };
        
        // T·∫°o dialog ch·ªçn avatar
        JDialog avatarDialog = new JDialog(frame, "Choose Avatar", true);
        avatarDialog.setSize(400, 300);
        avatarDialog.setLocationRelativeTo(frame);
        avatarDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        JPanel avatarPanel = new JPanel(new GridLayout(0, 10, 5, 5));
        avatarPanel.setBackground(Color.WHITE);
        avatarPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        for (String avatar : avatars) {
            JButton avatarBtn = new JButton(avatar);
            avatarBtn.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 18));
            avatarBtn.setPreferredSize(new Dimension(30, 30));
            avatarBtn.setBackground(Color.WHITE);
            avatarBtn.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
            
            // Hover effect
            avatarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    avatarBtn.setBackground(new Color(240, 240, 240));
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    avatarBtn.setBackground(Color.WHITE);
                }
            });
            
            avatarBtn.addActionListener(e -> {
                currentAvatar = avatar;
                avatarButton.setText(avatar);
                avatarDialog.dispose();
                addSystemMessage("‚úÖ Avatar updated to: " + avatar);
            });
            
            avatarPanel.add(avatarBtn);
        }
        
        JScrollPane scrollPane = new JScrollPane(avatarPanel);
        scrollPane.setBorder(null);
        scrollPane.getViewport().setBackground(Color.WHITE);
        
        avatarDialog.add(scrollPane);
        avatarDialog.setVisible(true);
    }
    
    // Utility methods (t·ª´ ClientFeatures)
    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        return String.format("%.1f MB", bytes / (1024.0 * 1024.0));
    }
    
    private boolean isImageFile(String fileName) {
        String extension = fileName.toLowerCase();
        return extension.endsWith(".jpg") || extension.endsWith(".jpeg") || 
               extension.endsWith(".png") || extension.endsWith(".gif") || 
               extension.endsWith(".bmp") || extension.endsWith(".webp");
    }
    

    // Ph∆∞∆°ng th·ª©c main ƒë·ªÉ kh·ªüi ƒë·ªông client
    public static void main(String[] args) {
        new Client();                        
    }
}	